/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface StakeMiningInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BLOCKS_PER_DAY"
      | "BLOCK_RELEASE_RATE_MINING"
      | "BLOCK_RELEASE_RATE_ORDINARY_DIVIDEND"
      | "BLOCK_RELEASE_RATE_STAKING"
      | "BLOCK_RELEASE_RATE_SUPER_DIVIDEND"
      | "DIRECT_INVITE_RATE"
      | "MINING_MULTIPLIER"
      | "MIN_MINING_AMOUNT"
      | "ORDINARY_NODE_DIVIDEND_RATE"
      | "ORDINARY_NODE_THRESHOLD"
      | "RATE_BASE"
      | "SECOND_INVITE_RATE"
      | "STAKING_MULTIPLIER"
      | "SUPER_NODE_DIVIDEND_RATE"
      | "SUPER_NODE_INVITE_THRESHOLD"
      | "SUPER_NODE_THRESHOLD"
      | "USDT_ADDRESS"
      | "claimDividendRewards"
      | "claimDividendRewardsForUser"
      | "claimMiningRewards"
      | "claimMiningRewardsForUser"
      | "claimStakingRewards"
      | "claimStakingRewardsForUser"
      | "directInvitees"
      | "distributeDividends"
      | "dividendPoolAmount"
      | "emergencyWithdraw"
      | "getClaimableRewards"
      | "getClaimedRewards"
      | "getGlobalStats"
      | "getIndirectInviteCount"
      | "getUserInfo"
      | "hasMined"
      | "hasStaked"
      | "isGtSuperNodeAmount"
      | "isOrdinaryNode"
      | "isSuperNode"
      | "mining"
      | "ordinaryNodes"
      | "owner"
      | "renounceOwnership"
      | "rewardToken"
      | "stakingForOther"
      | "stakingForSelf"
      | "superNodes"
      | "totalMiningAddresses"
      | "totalMiningClaimedRewards"
      | "totalStakingAddresses"
      | "totalStakingClaimedRewards"
      | "transferOwnership"
      | "usdtReceiver"
      | "userInviteRewards"
      | "userMiningRecords"
      | "userOrdinaryDividends"
      | "userStakingRecords"
      | "userSuperDividends"
      | "userTotalMiningAmount"
      | "userTotalStakingAmount"
      | "users"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DividendDistributed"
      | "InviterBound"
      | "Mining"
      | "OwnershipTransferred"
      | "RewardClaimed"
      | "Staking"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BLOCKS_PER_DAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BLOCK_RELEASE_RATE_MINING",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BLOCK_RELEASE_RATE_ORDINARY_DIVIDEND",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BLOCK_RELEASE_RATE_STAKING",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BLOCK_RELEASE_RATE_SUPER_DIVIDEND",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DIRECT_INVITE_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINING_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_MINING_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ORDINARY_NODE_DIVIDEND_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ORDINARY_NODE_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "RATE_BASE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SECOND_INVITE_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAKING_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUPER_NODE_DIVIDEND_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUPER_NODE_INVITE_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUPER_NODE_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USDT_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimDividendRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimDividendRewardsForUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimMiningRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimMiningRewardsForUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimStakingRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimStakingRewardsForUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "directInvitees",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeDividends",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dividendPoolAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimedRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIndirectInviteCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasMined",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasStaked",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isGtSuperNodeAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isOrdinaryNode",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSuperNode",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mining",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ordinaryNodes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingForOther",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingForSelf",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "superNodes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalMiningAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalMiningClaimedRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakingAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakingClaimedRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "usdtReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userInviteRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userMiningRecords",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userOrdinaryDividends",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userStakingRecords",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userSuperDividends",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userTotalMiningAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userTotalStakingAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "users", values: [AddressLike]): string;

  decodeFunctionResult(
    functionFragment: "BLOCKS_PER_DAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BLOCK_RELEASE_RATE_MINING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BLOCK_RELEASE_RATE_ORDINARY_DIVIDEND",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BLOCK_RELEASE_RATE_STAKING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BLOCK_RELEASE_RATE_SUPER_DIVIDEND",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DIRECT_INVITE_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINING_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_MINING_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ORDINARY_NODE_DIVIDEND_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ORDINARY_NODE_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "RATE_BASE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SECOND_INVITE_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STAKING_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUPER_NODE_DIVIDEND_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUPER_NODE_INVITE_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUPER_NODE_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "USDT_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimDividendRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimDividendRewardsForUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimMiningRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimMiningRewardsForUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimStakingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimStakingRewardsForUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "directInvitees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeDividends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dividendPoolAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIndirectInviteCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasMined", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasStaked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isGtSuperNodeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOrdinaryNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSuperNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mining", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ordinaryNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingForOther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingForSelf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "superNodes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalMiningAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalMiningClaimedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakingAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakingClaimedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usdtReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userInviteRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userMiningRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userOrdinaryDividends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userStakingRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userSuperDividends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userTotalMiningAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userTotalStakingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
}

export namespace DividendDistributedEvent {
  export type InputTuple = [
    totalAmount: BigNumberish,
    ordinaryAmount: BigNumberish,
    superAmount: BigNumberish
  ];
  export type OutputTuple = [
    totalAmount: bigint,
    ordinaryAmount: bigint,
    superAmount: bigint
  ];
  export interface OutputObject {
    totalAmount: bigint;
    ordinaryAmount: bigint;
    superAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InviterBoundEvent {
  export type InputTuple = [
    user: AddressLike,
    directInviter: AddressLike,
    secondInviter: AddressLike
  ];
  export type OutputTuple = [
    user: string,
    directInviter: string,
    secondInviter: string
  ];
  export interface OutputObject {
    user: string;
    directInviter: string;
    secondInviter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MiningEvent {
  export type InputTuple = [
    user: AddressLike,
    usdtAmount: BigNumberish,
    rewardAmount: BigNumberish,
    inviter: AddressLike
  ];
  export type OutputTuple = [
    user: string,
    usdtAmount: bigint,
    rewardAmount: bigint,
    inviter: string
  ];
  export interface OutputObject {
    user: string;
    usdtAmount: bigint;
    rewardAmount: bigint;
    inviter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardClaimedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakingEvent {
  export type InputTuple = [
    user: AddressLike,
    stakingAmount: BigNumberish,
    rewardAmount: BigNumberish,
    inviter: AddressLike
  ];
  export type OutputTuple = [
    user: string,
    stakingAmount: bigint,
    rewardAmount: bigint,
    inviter: string
  ];
  export interface OutputObject {
    user: string;
    stakingAmount: bigint;
    rewardAmount: bigint;
    inviter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StakeMining extends BaseContract {
  connect(runner?: ContractRunner | null): StakeMining;
  waitForDeployment(): Promise<this>;

  interface: StakeMiningInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BLOCKS_PER_DAY: TypedContractMethod<[], [bigint], "view">;

  BLOCK_RELEASE_RATE_MINING: TypedContractMethod<[], [bigint], "view">;

  BLOCK_RELEASE_RATE_ORDINARY_DIVIDEND: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  BLOCK_RELEASE_RATE_STAKING: TypedContractMethod<[], [bigint], "view">;

  BLOCK_RELEASE_RATE_SUPER_DIVIDEND: TypedContractMethod<[], [bigint], "view">;

  DIRECT_INVITE_RATE: TypedContractMethod<[], [bigint], "view">;

  MINING_MULTIPLIER: TypedContractMethod<[], [bigint], "view">;

  MIN_MINING_AMOUNT: TypedContractMethod<[], [bigint], "view">;

  ORDINARY_NODE_DIVIDEND_RATE: TypedContractMethod<[], [bigint], "view">;

  ORDINARY_NODE_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  RATE_BASE: TypedContractMethod<[], [bigint], "view">;

  SECOND_INVITE_RATE: TypedContractMethod<[], [bigint], "view">;

  STAKING_MULTIPLIER: TypedContractMethod<[], [bigint], "view">;

  SUPER_NODE_DIVIDEND_RATE: TypedContractMethod<[], [bigint], "view">;

  SUPER_NODE_INVITE_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  SUPER_NODE_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  USDT_ADDRESS: TypedContractMethod<[], [string], "view">;

  claimDividendRewards: TypedContractMethod<[], [void], "nonpayable">;

  claimDividendRewardsForUser: TypedContractMethod<
    [_user: AddressLike],
    [void],
    "nonpayable"
  >;

  claimMiningRewards: TypedContractMethod<[], [void], "nonpayable">;

  claimMiningRewardsForUser: TypedContractMethod<
    [_user: AddressLike],
    [void],
    "nonpayable"
  >;

  claimStakingRewards: TypedContractMethod<[], [void], "nonpayable">;

  claimStakingRewardsForUser: TypedContractMethod<
    [_user: AddressLike],
    [void],
    "nonpayable"
  >;

  directInvitees: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  distributeDividends: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  dividendPoolAmount: TypedContractMethod<[], [bigint], "view">;

  emergencyWithdraw: TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getClaimableRewards: TypedContractMethod<
    [_user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        miningReward: bigint;
        stakingReward: bigint;
        dividendReward: bigint;
      }
    ],
    "view"
  >;

  getClaimedRewards: TypedContractMethod<
    [_user: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        miningReward: bigint;
        stakingReward: bigint;
        inviteReward: bigint;
        dividendReward: bigint;
      }
    ],
    "view"
  >;

  getGlobalStats: TypedContractMethod<
    [],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        miningAddresses: bigint;
        stakingAddresses: bigint;
        miningClaimedRewards: bigint;
        stakingClaimedRewards: bigint;
        totalMiningAmount: bigint;
        totalStakingAmount: bigint;
        ordinaryNodeCount: bigint;
        superNodeCount: bigint;
        ordinaryNodesKpi: bigint;
        superNodesKpi: bigint;
        dividendPool: bigint;
      }
    ],
    "view"
  >;

  getIndirectInviteCount: TypedContractMethod<
    [_user: AddressLike],
    [bigint],
    "view"
  >;

  getUserInfo: TypedContractMethod<
    [_user: AddressLike],
    [
      [string, string, bigint, bigint, bigint, bigint, bigint] & {
        directInviter: string;
        secondInviter: string;
        totalMiningAmount: bigint;
        totalStakingAmount: bigint;
        directInviteCount: bigint;
        nodeType: bigint;
        performance: bigint;
      }
    ],
    "view"
  >;

  hasMined: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  hasStaked: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isGtSuperNodeAmount: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  isOrdinaryNode: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isSuperNode: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  mining: TypedContractMethod<
    [_amount: BigNumberish, _inviter: AddressLike],
    [void],
    "nonpayable"
  >;

  ordinaryNodes: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rewardToken: TypedContractMethod<[], [string], "view">;

  stakingForOther: TypedContractMethod<
    [_amount: BigNumberish, _user: AddressLike],
    [void],
    "nonpayable"
  >;

  stakingForSelf: TypedContractMethod<
    [_amount: BigNumberish, _inviter: AddressLike],
    [void],
    "nonpayable"
  >;

  superNodes: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  totalMiningAddresses: TypedContractMethod<[], [bigint], "view">;

  totalMiningClaimedRewards: TypedContractMethod<[], [bigint], "view">;

  totalStakingAddresses: TypedContractMethod<[], [bigint], "view">;

  totalStakingClaimedRewards: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  usdtReceiver: TypedContractMethod<[], [string], "view">;

  userInviteRewards: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  userMiningRecords: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        amount: bigint;
        reward: bigint;
        startBlock: bigint;
        claimedReward: bigint;
      }
    ],
    "view"
  >;

  userOrdinaryDividends: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        amount: bigint;
        startBlock: bigint;
        claimedAmount: bigint;
        blockRate: bigint;
      }
    ],
    "view"
  >;

  userStakingRecords: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        amount: bigint;
        reward: bigint;
        startBlock: bigint;
        claimedReward: bigint;
      }
    ],
    "view"
  >;

  userSuperDividends: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        amount: bigint;
        startBlock: bigint;
        claimedAmount: bigint;
        blockRate: bigint;
      }
    ],
    "view"
  >;

  userTotalMiningAmount: TypedContractMethod<[], [bigint], "view">;

  userTotalStakingAmount: TypedContractMethod<[], [bigint], "view">;

  users: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, bigint, bigint] & {
        directInviter: string;
        totalMiningAmount: bigint;
        totalStakingAmount: bigint;
        kpi: bigint;
        directInviteCount: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BLOCKS_PER_DAY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BLOCK_RELEASE_RATE_MINING"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BLOCK_RELEASE_RATE_ORDINARY_DIVIDEND"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BLOCK_RELEASE_RATE_STAKING"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BLOCK_RELEASE_RATE_SUPER_DIVIDEND"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DIRECT_INVITE_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MINING_MULTIPLIER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_MINING_AMOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ORDINARY_NODE_DIVIDEND_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ORDINARY_NODE_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "RATE_BASE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SECOND_INVITE_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "STAKING_MULTIPLIER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SUPER_NODE_DIVIDEND_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SUPER_NODE_INVITE_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SUPER_NODE_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "USDT_ADDRESS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claimDividendRewards"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimDividendRewardsForUser"
  ): TypedContractMethod<[_user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimMiningRewards"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimMiningRewardsForUser"
  ): TypedContractMethod<[_user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimStakingRewards"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimStakingRewardsForUser"
  ): TypedContractMethod<[_user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "directInvitees"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "distributeDividends"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "dividendPoolAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getClaimableRewards"
  ): TypedContractMethod<
    [_user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        miningReward: bigint;
        stakingReward: bigint;
        dividendReward: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getClaimedRewards"
  ): TypedContractMethod<
    [_user: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        miningReward: bigint;
        stakingReward: bigint;
        inviteReward: bigint;
        dividendReward: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGlobalStats"
  ): TypedContractMethod<
    [],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        miningAddresses: bigint;
        stakingAddresses: bigint;
        miningClaimedRewards: bigint;
        stakingClaimedRewards: bigint;
        totalMiningAmount: bigint;
        totalStakingAmount: bigint;
        ordinaryNodeCount: bigint;
        superNodeCount: bigint;
        ordinaryNodesKpi: bigint;
        superNodesKpi: bigint;
        dividendPool: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getIndirectInviteCount"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserInfo"
  ): TypedContractMethod<
    [_user: AddressLike],
    [
      [string, string, bigint, bigint, bigint, bigint, bigint] & {
        directInviter: string;
        secondInviter: string;
        totalMiningAmount: bigint;
        totalStakingAmount: bigint;
        directInviteCount: bigint;
        nodeType: bigint;
        performance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasMined"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasStaked"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isGtSuperNodeAmount"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isOrdinaryNode"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isSuperNode"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "mining"
  ): TypedContractMethod<
    [_amount: BigNumberish, _inviter: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ordinaryNodes"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "stakingForOther"
  ): TypedContractMethod<
    [_amount: BigNumberish, _user: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stakingForSelf"
  ): TypedContractMethod<
    [_amount: BigNumberish, _inviter: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "superNodes"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalMiningAddresses"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalMiningClaimedRewards"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalStakingAddresses"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalStakingClaimedRewards"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdtReceiver"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "userInviteRewards"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "userMiningRecords"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        amount: bigint;
        reward: bigint;
        startBlock: bigint;
        claimedReward: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userOrdinaryDividends"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        amount: bigint;
        startBlock: bigint;
        claimedAmount: bigint;
        blockRate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userStakingRecords"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        amount: bigint;
        reward: bigint;
        startBlock: bigint;
        claimedReward: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userSuperDividends"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        amount: bigint;
        startBlock: bigint;
        claimedAmount: bigint;
        blockRate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userTotalMiningAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "userTotalStakingAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "users"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, bigint, bigint] & {
        directInviter: string;
        totalMiningAmount: bigint;
        totalStakingAmount: bigint;
        kpi: bigint;
        directInviteCount: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "DividendDistributed"
  ): TypedContractEvent<
    DividendDistributedEvent.InputTuple,
    DividendDistributedEvent.OutputTuple,
    DividendDistributedEvent.OutputObject
  >;
  getEvent(
    key: "InviterBound"
  ): TypedContractEvent<
    InviterBoundEvent.InputTuple,
    InviterBoundEvent.OutputTuple,
    InviterBoundEvent.OutputObject
  >;
  getEvent(
    key: "Mining"
  ): TypedContractEvent<
    MiningEvent.InputTuple,
    MiningEvent.OutputTuple,
    MiningEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RewardClaimed"
  ): TypedContractEvent<
    RewardClaimedEvent.InputTuple,
    RewardClaimedEvent.OutputTuple,
    RewardClaimedEvent.OutputObject
  >;
  getEvent(
    key: "Staking"
  ): TypedContractEvent<
    StakingEvent.InputTuple,
    StakingEvent.OutputTuple,
    StakingEvent.OutputObject
  >;

  filters: {
    "DividendDistributed(uint256,uint256,uint256)": TypedContractEvent<
      DividendDistributedEvent.InputTuple,
      DividendDistributedEvent.OutputTuple,
      DividendDistributedEvent.OutputObject
    >;
    DividendDistributed: TypedContractEvent<
      DividendDistributedEvent.InputTuple,
      DividendDistributedEvent.OutputTuple,
      DividendDistributedEvent.OutputObject
    >;

    "InviterBound(address,address,address)": TypedContractEvent<
      InviterBoundEvent.InputTuple,
      InviterBoundEvent.OutputTuple,
      InviterBoundEvent.OutputObject
    >;
    InviterBound: TypedContractEvent<
      InviterBoundEvent.InputTuple,
      InviterBoundEvent.OutputTuple,
      InviterBoundEvent.OutputObject
    >;

    "Mining(address,uint256,uint256,address)": TypedContractEvent<
      MiningEvent.InputTuple,
      MiningEvent.OutputTuple,
      MiningEvent.OutputObject
    >;
    Mining: TypedContractEvent<
      MiningEvent.InputTuple,
      MiningEvent.OutputTuple,
      MiningEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RewardClaimed(address,uint256)": TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;
    RewardClaimed: TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;

    "Staking(address,uint256,uint256,address)": TypedContractEvent<
      StakingEvent.InputTuple,
      StakingEvent.OutputTuple,
      StakingEvent.OutputObject
    >;
    Staking: TypedContractEvent<
      StakingEvent.InputTuple,
      StakingEvent.OutputTuple,
      StakingEvent.OutputObject
    >;
  };
}
